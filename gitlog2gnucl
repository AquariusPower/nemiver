#!/usr/bin/ruby

#To use this script, do: ./gitlog2gnucl > ChangeLog.generated
#ChangeLog.generated will be your generated ChangeLog file.

#Author: Dodji Seketeli

#This program is free software; you can redistribute
#it and/or modify it under the terms of
#the GNU General Public License as published by the
#Free Software Foundation; either version 2,
#or (at your option) any later version.

#This program is distributed in the hope that it will
#be useful, but WITHOUT ANY WARRANTY;
#without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#See the GNU General Public License for more details.

#You should have received a copy of the
#GNU General Public License along with Nemiver;
#see the file COPYING.
#If not, write to the Free Software Foundation,
#Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class Entry
  attr_accessor :date, :author, :summary, :body, :first_msg_line

  def initialize(date, author, summary, body, first_msg_line)
    @date = filter_date(date)
    @author = author
    @summary = summary
    @body = body
    @first_msg_line = first_msg_line

  end

  def filter_date(date)
    if date =~ /(\d\d\d\d-\d\d-\d\d) (\d\d:\d\d:\d\d) (\+\d\d\d\d)/
      return $1
    end
    return date
  end

  # Filters lines of body and summary
  # Basically, don't keep lines with dates formated like:
  # Lundi 2 Juillet 2007, Foo bar <foo@bar.org>
  def keep_line(line)
    if line =~ /svn path=(.*)?; revision=.*/
      return false
    end

    #Filter out lines containing some date formated like: mardi 2 Mars 2006
    if line =~ /\w+\s\d{1,2} .+? \d\d\d\d,/
      return false
    end
    #Filter out lines containing data like
    if line =~ /^\d\d\d\d-\d\d-\d\d [\w\s]+/
      return false
    end
    #Filter out signed offs:
    if line =~ /^Signed-off-by:/
      return false
    end

    return true
  end

  def to_s
    body_empty = true
    s = "#{@date}  #{@author}\n\n"
    if !summary.empty?
      if  keep_line(summary)
        s += "\t#{@summary}\n"
      end
    end
    @body.each {|line|
      if keep_line(line)
	s += "\t#{line}\n"
        body_empty = false;
      end
    }
    if summary.empty? and body_empty == true
      s += "\t#{@first_msg_line}\n"
    end
    return s
  end
end

def process_git_log (log)

  author = ""
  date = ""
  summary = ""
  first_msg_line = ""
  body = Array.new
  msg_line_num = 0
  body_started = false;

  entries = Array.new

  log.each_line {|line|
    if line =~ /^--START-ENTRY--/ #This is the start of an entry
      author = ""
      date = ""
      summary = ""
      body = Array.new
      msg_line_num = 0
      body_started = false;
      commit = ""
      first_msg_line = ""
      next
    elsif line =~ /^--END-ENTRY--/
      msg_line_num = 0
      if !author.empty? and !date.empty?
	entries.push(Entry.new(date, author, summary, body, first_msg_line))
      end
      next
    else #We are in the middle of an entry
      if line =~ /^Author:(.*)?$/
	author = $1
        author = author.strip
      elsif line =~ /^Date:(.*)?$/
	date = $1
        date = date.strip
      elsif line =~ /^commit ([a-f]|[0-9])+$/
        commit = line.strip
      else #if line =~ /^.+?$/
	msg_line_num += 1
	line = line.strip
        if line[0] == '*'
          body_started = true;
        end
	if line.length == 0
	  next
	end
	if msg_line_num == 1 and line[0] != '*'
          summary = line;
        elsif msg_line_num == 1
          first_msg_line = line.strip
	elsif body_started
	  body.push(line.strip)
	end
      end
    end
  }
  return entries
end

gitlog = `git log --pretty=format:"--START-ENTRY--%ncommit %H%nAuthor:%an <%ae>%nDate:%ai%n%s%n%b%n--END-ENTRY--"`
entries = process_git_log(gitlog);
entries.each {|entry| print(entry.to_s,"\n") }

