<page xmlns="http://projectmallard.org/1.0/"
    type="topic"
    id="what-is-nemiver">

    <info>
        <link type="guide" xref="index"/>
        <revision version="0.1" date="2013-07-15" status="stub"/>
        <desc>Presenting <app>Nemiver</app> application</desc>
    </info>

    <title>What is Nemiver</title>

    <p><app>Nemiver</app> is a graphical debugger built on top of GNOME
    technologies, an application that helps to analyze bugs and weird behaviors
    in a program. Debugging consists of running a program inside an environment
    that traces and collects details of this program, like variables values or
    code path.</p>

    <p>To ease debugging, <app>Nemiver</app> features functions like <link
    xref="breakpoints" /> (<app>Nemiver</app> implements unseen breakpoints type
    like countpoints for instance), or <gui>Memory</gui> views.</p>

    <p><app>Nemiver</app> uses underneath <link href="http://www.gnu.org/software/gdb/">
    GDB</link> (the GNU debugger), as debugging engine, so as consequence 
    Nemiver can debug C and C++ programs.</p>

    <p><app>Nemiver</app> was originally developped by Dodji Seketeli and
    Jonathon Jongsma, with the contribution of other developers.</p>

    <section id="interface">

        <title>Interface</title>

        <figure>
            <title>The Main Interface while debugging an application</title>

            <desc>The main interface of Nemiver, with the menu on top, below the
            source code view, and at the bottom the toolbox.</desc> <media
            type="image" mime="image/png"
            src="figures/main-interface.png"></media>
        </figure>

        <terms>
            <title>The toolbox</title>
            <p>The debugging tools</p>
            <item>
                <title>Target Terminal</title>
                <p>Any output produced by the program you debug will be displayed
                here.</p>
            </item>
            <item>
                <title>Context</title>
                <p>What reaching a breakpoint, provide information of the
                current location, about parent functions until
                <code>main()</code>, and their respective arguments, and
                variables.</p>
            </item>
            <item>
                <title>Breakpoints</title>
                <p>List the breakpoints set in the source code, and all their
                properties.</p>
            </item>
            <item>
                <title>Registers</title>
                <p>This tab displays all of the CPU registers and their values.
                Should a value change between two steps, the color of the value will
                be changed to red.</p>
            </item>
            <item>
                <title>Memory</title>
                <p>The memory inspector displays the content of a memory address in
                hexadecimal and in ASCII representation. The memory content can be
                display by byte, word (2 bytes) or long word (4 bytes).</p>
            </item>
            <item>
                <title>Expression Monitor</title>
                <p>The component will display all variables monitored, their latest
                value and their type.</p>
            </item>
        </terms>
    </section>
</page>
