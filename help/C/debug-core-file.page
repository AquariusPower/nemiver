<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="debug-core-file">

      <info>
        <link type="guide" xref="index#debugging-target"/>
        <revision version="0.1" date="2013-07-15" status="stub"/>
        <desc>To debug program already crashed</desc>
      </info>

    <title>Debug a program using a core file</title>

    <p>This method is to use when a program has already crashed and you need to
    understand afterwards what happened. This method requires the crash created
    a core file.</p>

    <p>To debug a core file, choose <guiseq><gui>File</gui>, <gui>Load Core
    Fileâ€¦</gui></guiseq>, then a new window appears:</p> <list>
    <item><p><gui>Core File</gui>, choose the core file you want to
    debug.</p></item> <item><p><gui>Executable</gui>, choose the executable file
    that generate the core file. It should be the same exact version.</p></item>
    </list>

    <section id="what-is-core-file">
        <title>What is a core file</title>

        <p>A core file is a file that contains a detail description of a program
        when it crashed. It's useful to do a post-mortem analysis after a crash
        in order to reproduce it and correct the underlaying problem that
        introduced the 
        crash.</p>
    </section>

    <section id="permit-core-file">
        <title>If core file are is generated on program crash?</title>

        <p>If no core file is generated when a program crash, you have to check
        if there are permitted.</p>
        <p>Open a terminal, and enter the commande <input>ulimit -c</input>, if
        the value returned is <output>0</output>, then it means core won't be
        created.</p>
        <p>To permit core generation, edit ~/.bashrc file and add a line
        <code>ulimit -c unlimited</code>, then save and log-out from your
        session.</p>
    </section>
</page>
